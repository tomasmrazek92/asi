{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/index.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "gsap.registerPlugin(ScrollTrigger, Flip);\n\n$(document).ready(() => {\n  // Find all <a> tags in the document and look for external\n  var links = document.getElementsByTagName('a');\n\n  // Get the current domain\n  var currentDomain = window.location.hostname;\n\n  // Loop through each link\n  for (var i = 0; i < links.length; i++) {\n    var link = links[i];\n\n    // Get the link's domain\n    var linkDomain = link.hostname;\n\n    // Check if the link is an external link\n    if (linkDomain !== currentDomain) {\n      // Set the target attribute to \"_blank\"\n      link.setAttribute('target', '_blank');\n    }\n  }\n});\n\n// Global Scope\nvar isScrollDisabled = false;\n\n// Function\nfunction debounce(func, wait) {\n  let timeout;\n  return function (...args) {\n    const context = this;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(context, args), wait);\n  };\n}\nfunction dfCards() {\n  let dfCardsTL;\n  let scrollTriggerInstance;\n\n  ScrollTrigger.defaults({\n    markers: true,\n    anticipatePin: 1,\n    ease: 'none',\n  });\n\n  function destroyScrollAnimation() {\n    if (dfCardsTL) {\n      dfCardsTL.kill(true);\n      dfCardsTL = null;\n    }\n\n    if (scrollTriggerInstance) {\n      scrollTriggerInstance.kill(true);\n      scrollTriggerInstance = null;\n    }\n\n    // Optional: Clear any inline styles added by GSAP\n    gsap.set('[data-gsap-clearProps]', { clearProps: 'all' });\n    gsap.set('[data-sticky-visual]', { clearProps: 'all' });\n    gsap.set('.pin-spacer', { clearProps: 'all' });\n  }\n\n  function initScrollAnimation() {\n    destroyScrollAnimation();\n\n    let dfCards = $('[data-sticky-visual=\"animated\"]').children();\n    let totalHeight = 0;\n    let lastHeight = 0;\n    let adjustedHeight;\n\n    function calculateSectionHeight() {\n      totalHeight = 0;\n      dfCards.each(function (index) {\n        let height = $(this).height();\n        totalHeight += height;\n\n        if (index === dfCards.length - 1) {\n          adjustedHeight = totalHeight - height;\n        }\n      });\n      return adjustedHeight;\n    }\n\n    function setDynamicZIndex(selector) {\n      const elements = $(selector);\n      const maxZIndex = elements.length;\n\n      elements.each(function (index) {\n        $(this).css('z-index', maxZIndex - index);\n      });\n    }\n\n    gsap.set(dfCards, { position: 'absolute' });\n    setDynamicZIndex(dfCards);\n\n    dfCardsTL = gsap.timeline({\n      scrollTrigger: {\n        trigger: '[data-sticky-visual=\"animated\"]',\n        start: () => `top ${$('.nav_wrap').outerHeight()}`,\n        end: () => `+=${calculateSectionHeight()}`,\n        pin: true,\n        scrub: true,\n        invalidateOnRefresh: true,\n      },\n    });\n\n    dfCards.each(function (index) {\n      if (index !== dfCards.length - 1) {\n        dfCardsTL.to($(this), {\n          ease: 'none',\n          clipPath: 'inset(0px 0px 100%)',\n        });\n      }\n    });\n  }\n\n  /***** GSAP Resize Handle *****/\n  ScrollTrigger.matchMedia({\n    // desktop\n    '(min-width: 992px)': initScrollAnimation,\n  });\n}\nfunction scrollNav() {\n  // Variables\n  const navbar = $('.nav');\n  let lastScroll = 0;\n\n  // Scroll handler with debouncing\n  const handleScroll = debounce(() => {\n    const currentScroll = window.scrollY;\n\n    if (currentScroll > lastScroll && currentScroll > 50 && !isScrollDisabled) {\n      // Scroll down - hide navbar\n      gsap.to(navbar, { y: '-200%', duration: 1, ease: 'power2.out' });\n    } else if (currentScroll < lastScroll) {\n      // Scroll up - show navbar\n      gsap.to(navbar, { y: '0%', duration: 1, ease: 'power2.out' });\n    }\n\n    lastScroll = currentScroll;\n  }, 10);\n\n  // Attach scroll listener\n  window.addEventListener('scroll', handleScroll);\n}\nfunction scrollDisabler() {\n  function toggleScroll() {\n    if (isScrollDisabled) {\n      isScrollDisabled = false;\n      lenis.start();\n    } else {\n      isScrollDisabled = true;\n      lenis.stop();\n    }\n  }\n\n  // Click Event\n  $('[scroll=\"toggle\"]').on('click', toggleScroll);\n\n  // Run on resize\n  const breakpoints = [991, 767, 479];\n  let lastWidth = window.innerWidth;\n\n  // Function to check breakpoints on window resize\n  function checkBreakpoints() {\n    const currentWidth = window.innerWidth;\n\n    breakpoints.forEach((breakpoint) => {\n      if (isScrollDisabled) {\n        if (\n          (lastWidth <= breakpoint && currentWidth > breakpoint) ||\n          (lastWidth >= breakpoint && currentWidth < breakpoint)\n        ) {\n          lenis.start();\n        }\n      }\n    });\n\n    // Update lastWidth for the next call\n    lastWidth = currentWidth;\n  }\n  window.addEventListener('resize', checkBreakpoints);\n}\n\nfunction animateCards() {\n  const cards = $('.card');\n  const middleIndex = Math.floor(cards.length / 2);\n  const middleCube = cards.eq(middleIndex);\n  let margin = -6;\n\n  // Split the middle\n  cards.each(function (index) {\n    const card = $(this);\n    let distance = Math.abs(index - middleIndex) * 1;\n    let zIndex = cards.length - Math.abs(index - middleIndex);\n\n    // Apply classes based on position relative to the middle index\n    if (index < middleIndex) {\n      card.addClass('before-middle');\n    } else if (index > middleIndex) {\n      card.addClass('after-middle');\n    } else {\n      card.addClass('middle-item');\n    }\n\n    // Apply styles\n    card.css({\n      '--distance': '0em',\n      'margin-left': `${margin}em`,\n      'margin-right': `${margin}em`,\n      '--depth': `${distance}em`,\n      'z-index': zIndex,\n    });\n  });\n\n  // Target colors\n  middleCube.addClass('middle');\n  $('.middle').each(function () {\n    const $middle = $(this);\n\n    // Target the 3 previous siblings\n    $middle\n      .prevAll('.card')\n      .slice(0, 3)\n      .each(function (index) {\n        $(this).addClass(index === 0 ? 'first' : index === 1 ? 'second' : 'third');\n      });\n\n    // Target the 3 following siblings\n    $middle\n      .nextAll('.card')\n      .slice(0, 3)\n      .each(function (index) {\n        $(this).addClass(index === 0 ? 'first' : index === 1 ? 'second' : 'third');\n      });\n  });\n\n  // Animate the timeline\n  let tl = gsap.timeline({\n    scrollTrigger: {\n      trigger: $('.card-wrap'),\n      start: 'top bottom',\n      end: 'bottom center',\n      scrub: true,\n    },\n  });\n\n  tl.fromTo(\n    $('.card-row'),\n    { '--rowX': '120em', '--rotationX': '-30deg', '--angle': '80deg' },\n    { '--rowX': '0em', '--rotationX': '-0deg', '--angle': '90deg', ease: 'none' }\n  );\n\n  tl.to(middleCube, {\n    '--zDepth': '12em',\n    ease: 'none',\n  });\n  tl.to(\n    cards.filter('.before-middle'),\n    {\n      '--zDepth': '-12em',\n      ease: 'none',\n    },\n    '<'\n  );\n  tl.to(\n    cards.filter('.after-middle'),\n    {\n      '--zDepth': '12em',\n      ease: 'none',\n    },\n    '<'\n  );\n\n  tl.fromTo(\n    middleCube,\n    {\n      '--depth': '-7em',\n      '--angle': '90deg',\n    },\n    { '--angle': '0deg', ease: 'none' },\n    '<'\n  );\n}\nfunction moveImage() {\n  let tl = gsap.timeline({\n    scrollTrigger: {\n      trigger: $('.timeline-box'),\n      start: 'top bottom',\n      end: 'top center',\n      scrub: true,\n    },\n  });\n  tl.to(\n    $('[data-timeline-mask]'),\n    {\n      height: '70%',\n      yPercent: -30,\n      ease: 'none',\n    },\n    '<'\n  );\n}\n\n// scrollflip component\n$('.section.cc-hp-timeline').each(function (index) {\n  let componentEl = $(this),\n    originEl = componentEl.find('[flip-origin]'),\n    targetEl = componentEl.find('[flip-target]'),\n    labelEl = componentEl.find('[data-label-el]');\n  let componentIndex = index,\n    timeline,\n    resizeTimer;\n  // asign matching data flip ids\n  originEl.each(function (index) {\n    let flipId = `${componentIndex}-${index}`;\n    $(this).attr('data-flip-id', flipId);\n    targetEl.eq(index).attr('data-flip-id', flipId);\n  });\n  // create timeline\n  function createTimeline() {\n    if (timeline) {\n      timeline.kill();\n      gsap.set(targetEl, { clearProps: 'all' });\n      gsap.set(labelEl, { clearProps: 'all' });\n    }\n    const state = Flip.getState(originEl);\n    timeline = gsap.timeline({\n      scrollTrigger: {\n        trigger: $('.card-wrap'),\n        start: 'top 80%',\n        end: 'top center',\n        scrub: true,\n      },\n    });\n    timeline.add(\n      Flip.from(state, {\n        targets: targetEl,\n        ignore: 'height',\n        ease: 'none',\n      })\n    );\n\n    // Target elements\n    const labelEnd = $('[data-label-end]');\n\n    // Get positions and widths\n    const labelBounds = labelEl[0].getBoundingClientRect();\n    const targetBounds = labelEnd[0].getBoundingClientRect();\n\n    // Calculate the x-axis offset needed to center labelEl with targetEl\n    const offsetX =\n      targetBounds.left + targetBounds.width / 2 - (labelBounds.left + labelBounds.width / 2);\n\n    // GSAP animation to move labelEl to the calculated offset\n    timeline.to(\n      labelEl,\n      {\n        x: `+=${offsetX}`,\n        ease: 'none',\n        onUpdate: function () {\n          // Animate the time during the movement\n          const startTime = 0 * 60; // 15:00 in minutes\n          const endTime = 3 * 60; // 19:00 in minutes\n          const progress = this.progress(); // Get the animation progress (0 to 1)\n          const currentTime = startTime + (endTime - startTime) * progress; // Interpolate time\n          const hours = Math.floor(currentTime / 60); // Extract hours\n          const minutes = Math.floor(currentTime % 60); // Extract minutes\n          const formattedTime = `${hours}:${minutes.toString().padStart(2, '0')}`; // Format as HH:MM\n          labelEl.find('div').text('+' + formattedTime + 'h'); // Update the label's text\n        },\n      },\n      '<0.2'\n    );\n    timeline.to(labelEl, { backgroundColor: 'red', color: 'white', duration: 0 });\n  }\n\n  createTimeline();\n\n  // update on window resize\n  window.addEventListener('resize', function () {\n    clearTimeout(resizeTimer);\n    resizeTimer = setTimeout(function () {\n      createTimeline();\n    }, 250);\n  });\n});\n\n// Init\ndfCards();\nscrollNav();\nscrollDisabler();\nanimateCards();\nmoveImage();\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,iCAAsB,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACA7F,OAAK,eAAe,eAAe,IAAI;AAEvC,IAAE,QAAQ,EAAE,MAAM,MAAM;AAEtB,QAAI,QAAQ,SAAS,qBAAqB,GAAG;AAG7C,QAAI,gBAAgB,OAAO,SAAS;AAGpC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,OAAO,MAAM,CAAC;AAGlB,UAAI,aAAa,KAAK;AAGtB,UAAI,eAAe,eAAe;AAEhC,aAAK,aAAa,UAAU,QAAQ;AAAA,MACtC;AAAA,IACF;AAAA,EACF,CAAC;AAGD,MAAI,mBAAmB;AAGvB,WAAS,SAAS,MAAM,MAAM;AAC5B,QAAI;AACJ,WAAO,YAAa,MAAM;AACxB,YAAM,UAAU;AAChB,mBAAa,OAAO;AACpB,gBAAU,WAAW,MAAM,KAAK,MAAM,SAAS,IAAI,GAAG,IAAI;AAAA,IAC5D;AAAA,EACF;AACA,WAAS,UAAU;AACjB,QAAI;AACJ,QAAI;AAEJ,kBAAc,SAAS;AAAA,MACrB,SAAS;AAAA,MACT,eAAe;AAAA,MACf,MAAM;AAAA,IACR,CAAC;AAED,aAAS,yBAAyB;AAChC,UAAI,WAAW;AACb,kBAAU,KAAK,IAAI;AACnB,oBAAY;AAAA,MACd;AAEA,UAAI,uBAAuB;AACzB,8BAAsB,KAAK,IAAI;AAC/B,gCAAwB;AAAA,MAC1B;AAGA,WAAK,IAAI,0BAA0B,EAAE,YAAY,MAAM,CAAC;AACxD,WAAK,IAAI,wBAAwB,EAAE,YAAY,MAAM,CAAC;AACtD,WAAK,IAAI,eAAe,EAAE,YAAY,MAAM,CAAC;AAAA,IAC/C;AAEA,aAAS,sBAAsB;AAC7B,6BAAuB;AAEvB,UAAIA,WAAU,EAAE,iCAAiC,EAAE,SAAS;AAC5D,UAAI,cAAc;AAClB,UAAI,aAAa;AACjB,UAAI;AAEJ,eAAS,yBAAyB;AAChC,sBAAc;AACd,QAAAA,SAAQ,KAAK,SAAU,OAAO;AAC5B,cAAI,SAAS,EAAE,IAAI,EAAE,OAAO;AAC5B,yBAAe;AAEf,cAAI,UAAUA,SAAQ,SAAS,GAAG;AAChC,6BAAiB,cAAc;AAAA,UACjC;AAAA,QACF,CAAC;AACD,eAAO;AAAA,MACT;AAEA,eAAS,iBAAiB,UAAU;AAClC,cAAM,WAAW,EAAE,QAAQ;AAC3B,cAAM,YAAY,SAAS;AAE3B,iBAAS,KAAK,SAAU,OAAO;AAC7B,YAAE,IAAI,EAAE,IAAI,WAAW,YAAY,KAAK;AAAA,QAC1C,CAAC;AAAA,MACH;AAEA,WAAK,IAAIA,UAAS,EAAE,UAAU,WAAW,CAAC;AAC1C,uBAAiBA,QAAO;AAExB,kBAAY,KAAK,SAAS;AAAA,QACxB,eAAe;AAAA,UACb,SAAS;AAAA,UACT,OAAO,MAAM,OAAO,EAAE,WAAW,EAAE,YAAY;AAAA,UAC/C,KAAK,MAAM,KAAK,uBAAuB;AAAA,UACvC,KAAK;AAAA,UACL,OAAO;AAAA,UACP,qBAAqB;AAAA,QACvB;AAAA,MACF,CAAC;AAED,MAAAA,SAAQ,KAAK,SAAU,OAAO;AAC5B,YAAI,UAAUA,SAAQ,SAAS,GAAG;AAChC,oBAAU,GAAG,EAAE,IAAI,GAAG;AAAA,YACpB,MAAM;AAAA,YACN,UAAU;AAAA,UACZ,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH;AAGA,kBAAc,WAAW;AAAA;AAAA,MAEvB,sBAAsB;AAAA,IACxB,CAAC;AAAA,EACH;AACA,WAAS,YAAY;AAEnB,UAAM,SAAS,EAAE,MAAM;AACvB,QAAI,aAAa;AAGjB,UAAM,eAAe,SAAS,MAAM;AAClC,YAAM,gBAAgB,OAAO;AAE7B,UAAI,gBAAgB,cAAc,gBAAgB,MAAM,CAAC,kBAAkB;AAEzE,aAAK,GAAG,QAAQ,EAAE,GAAG,SAAS,UAAU,GAAG,MAAM,aAAa,CAAC;AAAA,MACjE,WAAW,gBAAgB,YAAY;AAErC,aAAK,GAAG,QAAQ,EAAE,GAAG,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC;AAAA,MAC9D;AAEA,mBAAa;AAAA,IACf,GAAG,EAAE;AAGL,WAAO,iBAAiB,UAAU,YAAY;AAAA,EAChD;AACA,WAAS,iBAAiB;AACxB,aAAS,eAAe;AACtB,UAAI,kBAAkB;AACpB,2BAAmB;AACnB,cAAM,MAAM;AAAA,MACd,OAAO;AACL,2BAAmB;AACnB,cAAM,KAAK;AAAA,MACb;AAAA,IACF;AAGA,MAAE,mBAAmB,EAAE,GAAG,SAAS,YAAY;AAG/C,UAAM,cAAc,CAAC,KAAK,KAAK,GAAG;AAClC,QAAI,YAAY,OAAO;AAGvB,aAAS,mBAAmB;AAC1B,YAAM,eAAe,OAAO;AAE5B,kBAAY,QAAQ,CAAC,eAAe;AAClC,YAAI,kBAAkB;AACpB,cACG,aAAa,cAAc,eAAe,cAC1C,aAAa,cAAc,eAAe,YAC3C;AACA,kBAAM,MAAM;AAAA,UACd;AAAA,QACF;AAAA,MACF,CAAC;AAGD,kBAAY;AAAA,IACd;AACA,WAAO,iBAAiB,UAAU,gBAAgB;AAAA,EACpD;AAEA,WAAS,eAAe;AACtB,UAAM,QAAQ,EAAE,OAAO;AACvB,UAAM,cAAc,KAAK,MAAM,MAAM,SAAS,CAAC;AAC/C,UAAM,aAAa,MAAM,GAAG,WAAW;AACvC,QAAI,SAAS;AAGb,UAAM,KAAK,SAAU,OAAO;AAC1B,YAAM,OAAO,EAAE,IAAI;AACnB,UAAI,WAAW,KAAK,IAAI,QAAQ,WAAW,IAAI;AAC/C,UAAI,SAAS,MAAM,SAAS,KAAK,IAAI,QAAQ,WAAW;AAGxD,UAAI,QAAQ,aAAa;AACvB,aAAK,SAAS,eAAe;AAAA,MAC/B,WAAW,QAAQ,aAAa;AAC9B,aAAK,SAAS,cAAc;AAAA,MAC9B,OAAO;AACL,aAAK,SAAS,aAAa;AAAA,MAC7B;AAGA,WAAK,IAAI;AAAA,QACP,cAAc;AAAA,QACd,eAAe,GAAG;AAAA,QAClB,gBAAgB,GAAG;AAAA,QACnB,WAAW,GAAG;AAAA,QACd,WAAW;AAAA,MACb,CAAC;AAAA,IACH,CAAC;AAGD,eAAW,SAAS,QAAQ;AAC5B,MAAE,SAAS,EAAE,KAAK,WAAY;AAC5B,YAAM,UAAU,EAAE,IAAI;AAGtB,cACG,QAAQ,OAAO,EACf,MAAM,GAAG,CAAC,EACV,KAAK,SAAU,OAAO;AACrB,UAAE,IAAI,EAAE,SAAS,UAAU,IAAI,UAAU,UAAU,IAAI,WAAW,OAAO;AAAA,MAC3E,CAAC;AAGH,cACG,QAAQ,OAAO,EACf,MAAM,GAAG,CAAC,EACV,KAAK,SAAU,OAAO;AACrB,UAAE,IAAI,EAAE,SAAS,UAAU,IAAI,UAAU,UAAU,IAAI,WAAW,OAAO;AAAA,MAC3E,CAAC;AAAA,IACL,CAAC;AAGD,QAAI,KAAK,KAAK,SAAS;AAAA,MACrB,eAAe;AAAA,QACb,SAAS,EAAE,YAAY;AAAA,QACvB,OAAO;AAAA,QACP,KAAK;AAAA,QACL,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AAED,OAAG;AAAA,MACD,EAAE,WAAW;AAAA,MACb,EAAE,UAAU,SAAS,eAAe,UAAU,WAAW,QAAQ;AAAA,MACjE,EAAE,UAAU,OAAO,eAAe,SAAS,WAAW,SAAS,MAAM,OAAO;AAAA,IAC9E;AAEA,OAAG,GAAG,YAAY;AAAA,MAChB,YAAY;AAAA,MACZ,MAAM;AAAA,IACR,CAAC;AACD,OAAG;AAAA,MACD,MAAM,OAAO,gBAAgB;AAAA,MAC7B;AAAA,QACE,YAAY;AAAA,QACZ,MAAM;AAAA,MACR;AAAA,MACA;AAAA,IACF;AACA,OAAG;AAAA,MACD,MAAM,OAAO,eAAe;AAAA,MAC5B;AAAA,QACE,YAAY;AAAA,QACZ,MAAM;AAAA,MACR;AAAA,MACA;AAAA,IACF;AAEA,OAAG;AAAA,MACD;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX,WAAW;AAAA,MACb;AAAA,MACA,EAAE,WAAW,QAAQ,MAAM,OAAO;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AACA,WAAS,YAAY;AACnB,QAAI,KAAK,KAAK,SAAS;AAAA,MACrB,eAAe;AAAA,QACb,SAAS,EAAE,eAAe;AAAA,QAC1B,OAAO;AAAA,QACP,KAAK;AAAA,QACL,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AACD,OAAG;AAAA,MACD,EAAE,sBAAsB;AAAA,MACxB;AAAA,QACE,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,MAAM;AAAA,MACR;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAGA,IAAE,yBAAyB,EAAE,KAAK,SAAU,OAAO;AACjD,QAAI,cAAc,EAAE,IAAI,GACtB,WAAW,YAAY,KAAK,eAAe,GAC3C,WAAW,YAAY,KAAK,eAAe,GAC3C,UAAU,YAAY,KAAK,iBAAiB;AAC9C,QAAI,iBAAiB,OACnB,UACA;AAEF,aAAS,KAAK,SAAUC,QAAO;AAC7B,UAAI,SAAS,GAAG,kBAAkBA;AAClC,QAAE,IAAI,EAAE,KAAK,gBAAgB,MAAM;AACnC,eAAS,GAAGA,MAAK,EAAE,KAAK,gBAAgB,MAAM;AAAA,IAChD,CAAC;AAED,aAAS,iBAAiB;AACxB,UAAI,UAAU;AACZ,iBAAS,KAAK;AACd,aAAK,IAAI,UAAU,EAAE,YAAY,MAAM,CAAC;AACxC,aAAK,IAAI,SAAS,EAAE,YAAY,MAAM,CAAC;AAAA,MACzC;AACA,YAAM,QAAQ,KAAK,SAAS,QAAQ;AACpC,iBAAW,KAAK,SAAS;AAAA,QACvB,eAAe;AAAA,UACb,SAAS,EAAE,YAAY;AAAA,UACvB,OAAO;AAAA,UACP,KAAK;AAAA,UACL,OAAO;AAAA,QACT;AAAA,MACF,CAAC;AACD,eAAS;AAAA,QACP,KAAK,KAAK,OAAO;AAAA,UACf,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,MAAM;AAAA,QACR,CAAC;AAAA,MACH;AAGA,YAAM,WAAW,EAAE,kBAAkB;AAGrC,YAAM,cAAc,QAAQ,CAAC,EAAE,sBAAsB;AACrD,YAAM,eAAe,SAAS,CAAC,EAAE,sBAAsB;AAGvD,YAAM,UACJ,aAAa,OAAO,aAAa,QAAQ,KAAK,YAAY,OAAO,YAAY,QAAQ;AAGvF,eAAS;AAAA,QACP;AAAA,QACA;AAAA,UACE,GAAG,KAAK;AAAA,UACR,MAAM;AAAA,UACN,UAAU,WAAY;AAEpB,kBAAM,YAAY,IAAI;AACtB,kBAAM,UAAU,IAAI;AACpB,kBAAM,WAAW,KAAK,SAAS;AAC/B,kBAAM,cAAc,aAAa,UAAU,aAAa;AACxD,kBAAM,QAAQ,KAAK,MAAM,cAAc,EAAE;AACzC,kBAAM,UAAU,KAAK,MAAM,cAAc,EAAE;AAC3C,kBAAM,gBAAgB,GAAG,SAAS,QAAQ,SAAS,EAAE,SAAS,GAAG,GAAG;AACpE,oBAAQ,KAAK,KAAK,EAAE,KAAK,MAAM,gBAAgB,GAAG;AAAA,UACpD;AAAA,QACF;AAAA,QACA;AAAA,MACF;AACA,eAAS,GAAG,SAAS,EAAE,iBAAiB,OAAO,OAAO,SAAS,UAAU,EAAE,CAAC;AAAA,IAC9E;AAEA,mBAAe;AAGf,WAAO,iBAAiB,UAAU,WAAY;AAC5C,mBAAa,WAAW;AACxB,oBAAc,WAAW,WAAY;AACnC,uBAAe;AAAA,MACjB,GAAG,GAAG;AAAA,IACR,CAAC;AAAA,EACH,CAAC;AAGD,UAAQ;AACR,YAAU;AACV,iBAAe;AACf,eAAa;AACb,YAAU;",
  "names": ["dfCards", "index"]
}
