{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/index.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "$(document).ready(() => {\n  // Find all <a> tags in the document and look for external\n  var links = document.getElementsByTagName('a');\n\n  // Get the current domain\n  var currentDomain = window.location.hostname;\n\n  // Loop through each link\n  for (var i = 0; i < links.length; i++) {\n    var link = links[i];\n\n    // Get the link's domain\n    var linkDomain = link.hostname;\n\n    // Check if the link is an external link\n    if (linkDomain !== currentDomain) {\n      // Set the target attribute to \"_blank\"\n      link.setAttribute('target', '_blank');\n    }\n  }\n});\n\n// Global Scope\nvar isScrollDisabled = false;\n\n// Function\nfunction debounce(func, wait) {\n  let timeout;\n  return function (...args) {\n    const context = this;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(context, args), wait);\n  };\n}\nfunction dfCards() {\n  let dfCardsTL;\n  let scrollTriggerInstance;\n\n  ScrollTrigger.defaults({\n    markers: true,\n    anticipatePin: 1,\n  });\n\n  function destroyScrollAnimation() {\n    if (dfCardsTL) {\n      dfCardsTL.kill(true);\n      dfCardsTL = null;\n    }\n\n    if (scrollTriggerInstance) {\n      scrollTriggerInstance.kill(true);\n      scrollTriggerInstance = null;\n    }\n\n    // Optional: Clear any inline styles added by GSAP\n    gsap.set('[data-gsap-clearProps]', { clearProps: 'all' });\n    gsap.set('[data-sticky-visual]', { clearProps: 'all' });\n    gsap.set('.pin-spacer', { clearProps: 'all' });\n  }\n\n  function initScrollAnimation() {\n    destroyScrollAnimation();\n\n    let dfCards = $('[data-sticky-visual=\"animated\"] img');\n    let totalHeight = 0;\n    let lastHeight = 0;\n    let adjustedHeight;\n\n    function calculateSectionHeight() {\n      totalHeight = 0;\n      dfCards.each(function (index) {\n        let height = $(this).height();\n        totalHeight += height;\n\n        if (index === dfCards.length - 1) {\n          adjustedHeight = totalHeight - height;\n        }\n      });\n      return adjustedHeight;\n    }\n\n    function setDynamicZIndex(selector) {\n      const elements = $(selector);\n      const maxZIndex = elements.length;\n\n      elements.each(function (index) {\n        $(this).css('z-index', maxZIndex - index);\n      });\n    }\n\n    gsap.set(dfCards, { position: 'absolute' });\n    setDynamicZIndex(dfCards);\n\n    dfCardsTL = gsap.timeline({\n      scrollTrigger: {\n        trigger: '[data-sticky-visual=\"animated\"]',\n        start: () => `top ${$('.nav_wrap').outerHeight()}`,\n        end: () => `+=${calculateSectionHeight()}`,\n        pin: true,\n        scrub: true,\n        invalidateOnRefresh: true,\n      },\n    });\n\n    dfCards.each(function (index) {\n      if (index !== dfCards.length - 1) {\n        dfCardsTL.to($(this), {\n          ease: 'none',\n          clipPath: 'inset(0px 0px 100%)',\n        });\n      }\n    });\n  }\n\n  /***** GSAP Resize Handle *****/\n  ScrollTrigger.matchMedia({\n    // desktop\n    '(min-width: 992px)': initScrollAnimation,\n  });\n}\nfunction scrollDisabler() {\n  function toggleScroll() {\n    if (isScrollDisabled) {\n      isScrollDisabled = false;\n      lenis.start();\n    } else {\n      isScrollDisabled = true;\n      lenis.stop();\n    }\n  }\n\n  // Click Event\n  $('[scroll=\"toggle\"]').on('click', toggleScroll);\n\n  // Run on resize\n  const breakpoints = [991, 767, 479];\n  let lastWidth = window.innerWidth;\n\n  // Function to check breakpoints on window resize\n  function checkBreakpoints() {\n    const currentWidth = window.innerWidth;\n\n    breakpoints.forEach((breakpoint) => {\n      if (isScrollDisabled) {\n        if (\n          (lastWidth <= breakpoint && currentWidth > breakpoint) ||\n          (lastWidth >= breakpoint && currentWidth < breakpoint)\n        ) {\n          lenis.start();\n        }\n      }\n    });\n\n    // Update lastWidth for the next call\n    lastWidth = currentWidth;\n  }\n  window.addEventListener('resize', checkBreakpoints);\n}\nfunction scrollNav() {\n  // Variables\n  const navbar = $('.nav');\n  let lastScroll = 0;\n\n  // Scroll handler with debouncing\n  const handleScroll = debounce(() => {\n    const currentScroll = window.scrollY;\n\n    if (currentScroll > lastScroll && currentScroll > 50 && !isScrollDisabled) {\n      // Scroll down - hide navbar\n      gsap.to(navbar, { y: '-200%', duration: 1, ease: 'power2.out' });\n    } else if (currentScroll < lastScroll) {\n      // Scroll up - show navbar\n      gsap.to(navbar, { y: '0%', duration: 1, ease: 'power2.out' });\n    }\n\n    lastScroll = currentScroll;\n  }, 10);\n\n  // Attach scroll listener\n  window.addEventListener('scroll', handleScroll);\n}\n\n// Init\ndfCards();\nscrollNav();\nscrollDisabler();\n"],
  "mappings": "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",
  "names": ["dfCards"]
}
