{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/company.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "function initSplit() {\n  let typeSplit;\n  let tl;\n  let scrollTriggerInstance;\n\n  // Split the text up\n  function runSplit() {\n    // Revert any existing split before creating a new one\n    if (typeSplit) {\n      typeSplit.revert();\n    }\n\n    typeSplit = new SplitType('[data-mission-text]', {\n      types: 'words',\n    });\n  }\n\n  // Get scroll trigger settings based on current breakpoint\n  function getScrollTriggerSettings() {\n    const width = window.innerWidth;\n\n    if (width < 768) {\n      // Mobile\n      return {\n        start: 'top center',\n        end: 'bottom center',\n      };\n    }\n    if (width < 1024) {\n      // Tablet\n      return {\n        start: 'top 60%',\n        end: 'bottom 40%',\n      };\n    } // Desktop\n    return {\n      start: 'center bottom',\n      end: 'bottom center',\n    };\n  }\n\n  // Clean up existing animations and splits\n  function cleanup() {\n    // Kill specific ScrollTrigger instance if it exists\n    if (scrollTriggerInstance) {\n      scrollTriggerInstance.kill();\n    }\n\n    // Kill GSAP timeline if it exists\n    if (tl) {\n      tl.kill();\n    }\n\n    // Reset crosshair properties\n    gsap.set('.company_crosshair', {\n      clearProps: 'all',\n    });\n\n    // Revert split text if it exists\n    if (typeSplit) {\n      typeSplit.revert();\n    }\n  }\n\n  // Create the animation\n  function createAnimation() {\n    const scrollSettings = getScrollTriggerSettings();\n\n    tl = gsap.timeline({\n      scrollTrigger: {\n        trigger: '[data-mission-text]',\n        start: scrollSettings.start,\n        end: scrollSettings.end,\n        scrub: 0.1,\n        // markers: true,\n      },\n    });\n\n    // Store the ScrollTrigger instance\n    scrollTriggerInstance = ScrollTrigger.getAll().pop();\n\n    $('[data-mission-text] .word').each(function (index) {\n      let isHighlight = $(this).closest('[data-highlight-red]').length;\n      tl.to($(this), {\n        color: () => {\n          return isHighlight ? 'red' : 'black';\n        },\n        duration: 0.2,\n        ease: 'none',\n      });\n    });\n\n    tl.to(\n      '.company_crosshair',\n      {\n        y: () => gsap.getProperty('[data-mission-text]', 'height'),\n        ease: 'none',\n        duration: tl.duration() * 1,\n      },\n      0\n    );\n  }\n\n  // Function to initialize the split and animation\n  function initAnimation() {\n    cleanup(); // Clean up existing instances\n    runSplit(); // Create new split\n    createAnimation(); // Create new animation\n  }\n\n  // Initial setup\n  initAnimation();\n\n  // Add resize handler with debounce\n  let resizeTimeout;\n  window.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(() => {\n      initAnimation();\n    }, 250);\n  });\n\n  // Optional: Clean up on component unmount if needed\n  // return cleanup;\n}\n\nfunction teamSwipers() {\n  const swiperTeamBot = new Swiper('.team-slider-meta', {\n    slidesPerView: 1,\n    effect: 'fade',\n    fadeEffect: {\n      crossFade: true,\n    },\n    spaceBetween: 4,\n    centeredSlides: true,\n    loopAdditionalSlides: 20,\n    loop: true,\n    allowTouchMove: false, // Disable swipe\n    // Navigation arrows\n    navigation: {\n      nextEl: '.swiper-arrow.next',\n      prevEl: '.swiper-arrow.prev',\n    },\n  });\n\n  const swiperTeamTop = new Swiper('.team-slider', {\n    slidesPerView: 1,\n    spaceBetween: 4,\n    centeredSlides: true,\n    loopAdditionalSlides: 20,\n    loop: true,\n    // Navigation arrows\n    navigation: {\n      nextEl: '.swiper-arrow.next',\n      prevEl: '.swiper-arrow.prev',\n    },\n    // Controller\n    controller: {\n      control: swiperTeamBot,\n    },\n  });\n}\n\n$(document).ready(function () {\n  initSplit();\n  teamSwipers();\n});\n"],
  "mappings": "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",
  "names": []
}
